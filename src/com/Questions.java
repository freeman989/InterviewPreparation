package com;

import java.util.ArrayList;
import java.util.List;

public class Questions{
    public static List<String> core_1 = new ArrayList<>();
    public static List<String> core_2 = new ArrayList<>();
    public static List<String> multithreading = new ArrayList<>();
    public static List<String> sql = new ArrayList<>();
    public static List<String> jpa_hibernate = new ArrayList<>();
    public static List<String> spring = new ArrayList<>();
    public static List<String> patterns = new ArrayList<>();
    public static List<String> algorithms = new ArrayList<>();

    static {
        core_1.add("Что такое ООП?");

        core_1.add("Какие преимущества у ООП?");
        core_1.add("Какие недостатки у ООП?");
        core_1.add("Назовите основные принципы ООП.");
        core_1.add("Что такое инкапсуляция? (С примером)");
        core_1.add("Что такое наследование?(С примером)");
        core_1.add("Что такое полиморфизм? (С примером)");
        core_1.add("Что такое ассоциация, агрегация и композиция?");
        core_1.add("Расскажите про раннее и позднее связывание.");
        core_1.add("Принципы SOLID.");
        core_1.add("Какая основная идея языка?");
        core_1.add("За счет чего обеспечивается кроссплатформенность?");
        core_1.add("Какие преимущества у java?");
        core_1.add("Какие недостатки у Java?");
        core_1.add("Что такое JDK? Что в него входит?");
        core_1.add("Что такое JRE? что в него входит? ");
        core_1.add("Что такое JVM?");
        core_1.add("Что такое byte code?");
        core_1.add("Что такое загрузчик классов (classloader)?");
        core_1.add("Что такое JIT?");
        core_1.add("Что такое сборщик мусора? (Garbage collector)");
        core_1.add("Что такое Heap и Stack память в Java? Чем они отличаются?");
        core_1.add("Какие примитивные типы данных есть в Java?");
        core_1.add("Что такое char?");
        core_1.add("Сколько памяти занимает boolean?");
        core_1.add("Что такое классы-обертки?");
        core_1.add("Что такое автоупаковка и автораспаковка?");
        core_1.add("Что такое явное и неявное приведение типов? В каких случаях в java нужно использовать явное приведение?");
        core_1.add("Что такое пул интов?");
        core_1.add("Какие нюансы у строк в Java?");
        core_1.add("Что такое пул строк?");
        core_1.add("Почему не рекомендуется изменять строки в цикле? Что рекомендуется использовать?");
        core_1.add("Почему строки не рекомендуется использовать для хранения паролей?");
        core_1.add("Почему String неизменяемый и финализированный класс?");
        core_1.add("Почему строка является популярным ключом в HashMap в Java? ");
        core_1.add("Что делает метод intern() в классе String?");
        core_1.add("Можно ли использовать строки в конструкции switch?");
        core_1.add("Какая основная разница между String, StringBuffer, StringBuilder?");
        core_1.add("Существуют ли в java многомерные массивы?");
        core_1.add("Какими значениями инициируются переменные по умолчанию?");
        core_1.add("Что такое сигнатура метода?");
        core_1.add("Расскажите про метод main.");
        core_1.add("Каким образом переменные передаются в методы, по значению или по ссылке?");
        core_1.add("Какие виды классов есть в java?");
        core_1.add("Расскажите про вложенные классы. В каких случаях они применяются?");
        core_1.add("Что такое «локальный класс»? Каковы его особенности?");
        core_1.add("Что такое «анонимные классы»? Где они применяются?");
        core_1.add("Каким образом из вложенного класса получить доступ к полю внешнего класса?");
        core_1.add("Что такое перечисления (enum)?");
        core_1.add("Как проблема ромбовидного наследования решена в java?");
        core_1.add("Что такое конструктор по умолчанию?");
        core_1.add("Могут ли быть приватные конструкторы? Для чего они нужны?");
        core_1.add("Расскажите про классы-загрузчики и про динамическую загрузку классов.");
        core_1.add("Чем отличаются конструкторы по-умолчанию, конструктор копирования и конструктор с параметрами?");
        core_1.add("Какие модификаторы доступа есть в Java? Какие применимы к классам?");
        core_1.add("Что означает модификатор static?");
        core_1.add("Может ли статический метод быть переопределён или перегружен?");
        core_1.add("Могут ли нестатические методы перегрузить статические?");
        core_1.add("Можно ли сузить уровень доступа/тип возвращаемого значения при переопределении метода?");
        core_1.add("Что можно изменить в сигнатуре метода при переопределении? Можно ли менять модификаторы (throws и тп)?");
        core_1.add("Могут ли классы быть статическими?");
        core_1.add("Что означает модификатор final? К чему он может быть применим?");
        core_1.add("Что такое абстрактные классы? Чем они отличаются от обычных?");
        core_1.add("Может ли быть абстрактный класс без абстрактных методов?");
        core_1.add("Могут ли быть конструкторы у абстрактных классов? Для чего они нужны?");
        core_1.add("Что такое интерфейсы? Какие модификаторы по умолчанию имеют поля и методы интерфейсов?");
        core_1.add("Чем интерфейсы отличаются от абстрактных классов? В каких случаях следует использовать абстрактный класс, а в каких интерфейс?");
        core_1.add("Может ли один интерфейс наследоваться от другого? От двух других?");
        core_1.add("Что такое дефолтные методы интерфейсов? Для чего они нужны?");
        core_1.add("Как решается проблема ромбовидного наследования при наследовании интерфейсов при наличии default методов?");
        core_1.add("Каков порядок вызова конструкторов и блоков инициализации с учётом иерархии классов?");
        core_1.add("Зачем нужны и какие бывают блоки инициализации?");
        core_1.add("Для чего в Java используются статические блоки инициализации?");
        core_1.add("Что произойдет, если в блоке инициализации возникнет исключительная ситуация?");
        core_1.add("Какое исключение выбрасывается при возникновении ошибки в блоке инициализации класса?");
        core_1.add("Что такое класс Object?");
        core_1.add("Какие методы есть у класса Object (перечислить все)? Что они делают?");
        core_1.add("Расскажите про equals и hashcode.");
        core_1.add("Каким образом реализованы методы hashCode() и equals() в классе Object?");
        core_1.add("Зачем нужен equals(). Чем он отличается от операции ==?");
        core_1.add("Правила переопределения equals()");
        core_1.add("Что будет, если переопределить equals() не переопределяя hashCode()? Какие могут возникнуть проблемы?");
        core_1.add("Какой контракт между hashCode() и equals()?");
        core_1.add("Для чего нужен метод hashCode()?");
        core_1.add("Правила переопределения метода hashcode().");
        core_1.add("Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете hashCode()?");
        core_1.add("Могут ли у разных объектов быть одинаковые hashCode()?");
        core_1.add("Почему нельзя реализовать hashcode() который будет гарантированно уникальным для каждого объекта?");
        core_1.add("Есть класс Point{int x, y;}. Почему хэш-код в виде 31 * x + y предпочтительнее чем x + y?");
        core_1.add("Чем a.getClass().equals(A.class) отличается от a instanceOf A.class ?");
        core_1.add("Что такое исключения?");
        core_1.add("Опишите иерархию исключений.");
        core_1.add("Расскажите про обрабатываемые и необрабатываемые исключения.");
        core_1.add("Можно ли обработать необрабатываемые исключения?");
        core_1.add("Какой оператор позволяет принудительно выбросить исключение?");
        core_1.add("О чем говорит ключевое слово throws?");
        core_1.add("Как создать собственное («пользовательское») исключение?");
        core_1.add("Расскажите про механизм обработки исключений в java (Try-catch-finally).");
        core_1.add("Возможно ли использование блока try-finally (без catch)?");
        core_1.add("Может ли один блок catch отлавливать сразу несколько исключений?");
        core_1.add("Всегда ли выполняется блок finally? Существуют ли ситуации, когда блок finally не будет выполнен?");
        core_1.add("Может ли метод main() выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?");
        core_1.add("В каком порядке следует обрабатывать исключения в catch блоках?");
        core_1.add("Что такое механизм try-with-resources?");
        core_1.add("Что произойдет если исключение будет выброшено из блока catch после чего другое исключение будет выброшено из блока finally?");
        core_1.add("Что произойдет если исключение будет выброшено из блока catch после чего другое исключение будет выброшено из метода close() при использовании try-with-resources? ");
        core_1.add("Что такое сериализация и как она реализована в Java?");
        core_1.add("Для чего нужна сериализация?");
        core_1.add("Опишите процесс сериализации/десериализации с использованием Serializable.");
        core_1.add("Как изменить стандартное поведение сериализации/десериализации?");
        core_1.add("Какие поля не будут сериализованы при сериализации? Будет ли сериализовано final поле?");
        core_1.add("Как создать собственный протокол сериализации?");
        core_1.add("Какая роль поля serialVersionUID в сериализации?");
        core_1.add("Когда стоит изменять значение поля serialVersionUID?");
        core_1.add("В чем проблема сериализации Singleton?");
        core_1.add("Расскажите про клонирование объектов.");
        core_1.add("В чем отличие между поверхностным и глубоким клонированием?");
        core_1.add("Какой способ клонирования предпочтительней?");
        core_1.add("Почему метод clone() объявлен в классе Object, а не в интерфейсе Cloneable?");
        core_1.add("Как создать глубокую копию объекта? (2 способа).");
        core_1.add("");
    }
    static {
        core_2.add("Что такое дженерики?");
        core_2.add("Для чего нужны дженерики?");
        core_2.add("Что такое сырые типы (raw type)?");
        core_2.add("Что такое вайлдкарды?");
        core_2.add("Расскажите про принцип PECS.");
        core_2.add("Что такое «коллекция»?");
        core_2.add("Расскажите про иерархию коллекций.");
        core_2.add("Почему Map — это не Collection, в то время как List и Set являются Collection?");
        core_2.add("В чем разница между классами java.util.Collection и java.util.Collections?");
        core_2.add("Какая разница между итераторами с fail-fast и fail-safe поведением? (С примерами)");
        core_2.add("Чем различаются Enumeration и Iterator?");
        core_2.add("Как между собой связаны Iterable, Iterator и «for-each»?");
        core_2.add("Можно ли итерируясь по ArrayList удалить элемент? Какое вылетит исключение?");
        core_2.add("Как поведёт себя коллекция, если вызвать iterator.remove()?");
        core_2.add("Чем Set отличается от List?");
        core_2.add("Расскажите про интерфейс Set.");
        core_2.add("Расскажите про реализации интерфейса Set.");
        core_2.add("В чем отличия TreeSet и HashSet?");
        core_2.add("Чем LinkedHashSet отличается от HashSet?");
        core_2.add("Что будет, если добавлять элементы в TreeSet по возрастанию?");
        core_2.add("Как устроен HashSet, сложность основных операций.");
        core_2.add("Как устроен LinkedHashSet, сложность основных операций.");
        core_2.add("Как устроен TreeSet, сложность основных операций.");
        core_2.add("Расскажите про интерфейс List.");
        core_2.add("Как устроен ArrayList, сложность основных операций.");
        core_2.add("Как устроен LinkedList, сложность основных операций.");
        core_2.add("Почему LinkedList реализует и List, и Deque?");
        core_2.add("Чем отличаются ArrayList и LinkedList?");
        core_2.add("Что такое Queue?");
        core_2.add("Что такое Dequeue? Чем отличается от Queue?");
        core_2.add("Приведите пример реализации Dequeue.");
        core_2.add("Какая коллекция реализует  FIFO?");
        core_2.add("Какая коллекция реализует  LIFO?");
        core_2.add("Оцените количество памяти на хранение одного примитива типа byte в LinkedList?");
        core_2.add("Оцените количество памяти на хранение одного примитива типа byte в ArrayList?");
        core_2.add("Какие существуют реализации Map?");
        core_2.add("Как устроена HashMap, сложность основных операций? (Расскажите про принцип корзин).");
        core_2.add("Что такое LinkedHashMap?");
        core_2.add("Как устроена TreeMap, сложность основных операций?");
        core_2.add("Что такое WeakHashMap?");
        core_2.add("Как работает HashMap при попытке сохранить в него два элемента по ключам с одинаковым hashCode(), но для которых equals() == false? ");
        core_2.add("Что будет, если мы кладем в HashMap ключ, у которого equals и hashCode определены некорректно?");
        core_2.add("Возможна ли ситуация, когда HashMap выродится в список даже с ключами имеющими разные hashCode()?");
        core_2.add("Почему нельзя использовать byte[] в качестве ключа в HashMap?");
        core_2.add("Будет ли работать HashMap, если все добавляемые ключи будут иметь одинаковый hashCode()?");
        core_2.add("Какое худшее время работы метода get(key) для ключа, которого нет в HashMap?");
        core_2.add("Какое худшее время работы метода get(key) для ключа, который есть в HashMap? ");
        core_2.add("Что такое функциональный интерфейс?");
        core_2.add("Для чего нужна аннотация @FunctionalInterface?");
        core_2.add("Какие встроенные функциональные интерфейсы вы знаете?");
        core_2.add("Что такое ссылка на метод?");
        core_2.add("Что такое лямбда-выражение? Чем его можно заменить?");
        core_2.add("Что такое Stream API? Для чего нужны стримы?");
        core_2.add("Почему Stream называют ленивым?");
        core_2.add("Какие существуют способы создания стрима?");
        core_2.add("Как из коллекции создать стрим?");
        core_2.add("Какие промежуточные методы в стримах вы знаете?");
        core_2.add("Расскажите про метод peak().");
        core_2.add("Расскажите про метод map().");
        core_2.add("Расскажите про метод flatMap().");
        core_2.add("Чем отличаются методы map() и flatMap().");
        core_2.add("Расскажите про метод filter()");
        core_2.add("Расскажите про метод limit()");
        core_2.add("Расскажите про метод skip()");
        core_2.add("Расскажите про метод sorted()");
        core_2.add("Расскажите про метод distinct()");
        core_2.add("Какие терминальные методы в стримах вы знаете?");
        core_2.add("Расскажите про метод collect()");
        core_2.add("Расскажите про метод reduce()");
        core_2.add("Расскажите про класс Collectors и его методы.");
        core_2.add("Расскажите о параллельной обработке в Java 8.");
        core_2.add("Что такое IntStream и DoubleStream? ");
        core_2.add("Какие нововведения появились в java 8?");
        core_2.add("Какие новые классы для работы с датами появились в java 8?");
        core_2.add("Расскажите про класс Optional");
        core_2.add("Что такое Nashorn?");
        core_2.add("Что такое jjs?");
        core_2.add("Какой класс появился в Java 8 для кодирования/декодирования данных?");
        core_2.add("Как создать Base64 кодировщик и декодировщик?");
        core_2.add("Какие дополнительные методы для работы с ассоциативными массивами (maps) появились в Java 8?");
        core_2.add("Что такое LocalDateTime?");
        core_2.add("Что такое ZonedDateTime?");
        core_2.add("");
    }
    static {
        multithreading.add("Чем процесс отличается от потока?");
        multithreading.add("Чем Thread отличается от Runnable? Когда нужно использовать Thread, а когда Runnable?");
        multithreading.add("Что такое монитор? Как монитор реализован в java?");
        multithreading.add("Что такое синхронизация? Какие способы синхронизации существуют в java?");
        multithreading.add("Как работают методы wait(), notify() и notifyAll()?");
        multithreading.add("В каких состояниях может находиться поток?");
        multithreading.add("Что такое семафор? Как он реализован в Java?");
        multithreading.add("Что обозначает ключевое слово volatile? Почему операции над volatile переменными не атомарны?");
        multithreading.add("Для чего нужны Atomic типы данных? Чем отличаются от volatile?");
        multithreading.add("Что такое потоки демоны? Для чего они нужны? Как создать поток-демон?");
        multithreading.add("Что такое приоритет потока? На что он влияет? Какой приоритет у потоков по умолчанию?");
        multithreading.add("Как работает Thread.join()? Для чего он нужен?");
        multithreading.add("Чем отличаются методы yield () и sleep()?");
        multithreading.add("Как правильно остановить поток? Для чего нужны методы .stop(), .interrupt(), .interrupted(), .isInterrupted().");
        multithreading.add("Чем Runnable отличается от Callable?");
        multithreading.add("Что такое FutureTask?");
        multithreading.add("Что такое deadlock?");
        multithreading.add("Что такое livelock?");
        multithreading.add("Что такое race condition?");
        multithreading.add("Что такое Фреймворк fork/join? Для чего он нужен?");
        multithreading.add("Что означает ключевое слово synchronized? Где и для чего может использоваться?");
        multithreading.add("Что является монитором у статического синхронизированного класса?");
        multithreading.add("Что является монитором у нестатического синхронизированного класса?");
        multithreading.add("util. Concurrent поверхностно.");
        multithreading.add("Stream API & ForkJoinPool Как связаны, что это такое.");
        multithreading.add("");
    }
    static {
        sql.add("Что такое  DDL? Какие операции в него входят? Рассказать про них.");
        sql.add("Что такое  DML? Какие операции в него входят? Рассказать про них.");
        sql.add("Что такое  TCL? Какие операции в него входят? Рассказать про них.");
        sql.add("Что такое  DCL? Какие операции в него входят? Рассказать про них.");
        sql.add("Нюансы работы с NULL в SQL. Как проверить поле на NULL?");
        sql.add("Виды Join’ов?");
        sql.add("Что лучше использовать join или подзапросы? Почему?");
        sql.add("Что делает UNION?");
        sql.add("Чем WHERE отличается от HAVING ?");
        sql.add("Что такое ORDER BY?");
        sql.add("Что такое GROUP BY?");
        sql.add("Что такое DISTINCT?");
        sql.add("Что такое LIMIT?");
        sql.add("Что такое EXISTS?");
        sql.add("Расскажите про операторы IN, BETWEEN, LIKE.");
        sql.add("Что делает оператор MERGE? Какие у него есть ограничения?");
        sql.add("Какие агрегатные функции вы знаете?");
        sql.add("Что такое ограничения (constraints)? Какие вы знаете?");
        sql.add("Что такое суррогатные ключи?");
        sql.add("Что такое индексы? Какие они бывают?");
        sql.add("Чем TRUNCATE отличается от DELETE?");
        sql.add("Что такое хранимые процедуры? Для чего они нужны?");
        sql.add("Что такое представления (VIEW)? Для чего они нужны?");
        sql.add("Что такое временные таблицы? Для чего они нужны?");
        sql.add("Что такое транзакции? Расскажите про принципы ACID.");
        sql.add("Расскажите про уровни изолированности транзакций.");
        sql.add("Что такое нормализация и денормализация? Расскажите про 3 нормальные формы?");
        sql.add("Что такое TIMESTAMP?");
        sql.add("");
    }
    static {
        jpa_hibernate.add("Что такое ORM? Что такое JPA? Что такое Hibernate?");
        jpa_hibernate.add("Что такое EntityManager? Какие функции он выполняет?");
        jpa_hibernate.add("Каким условиям должен удовлетворять класс чтобы являться Entity?");
        jpa_hibernate.add("Может ли абстрактный класс быть Entity?");
        jpa_hibernate.add("Может ли Entity класс наследоваться от не Entity классов (non-entity classes)?");
        jpa_hibernate.add("Может ли Entity класс наследоваться от других Entity классов?");
        jpa_hibernate.add("Может ли не Entity класс наследоваться от Entity класса?");
        jpa_hibernate.add("Что такое встраиваемый (Embeddable) класс?  Какие требования JPA устанавливает к встраиваемым (Embeddable) классам?");
        jpa_hibernate.add("Что такое Mapped Superclass?");
        jpa_hibernate.add("Какие три типа стратегии наследования мапинга (Inheritance Mapping Strategies) описаны в JPA?");
        jpa_hibernate.add("Как мапятся Enumы?");
        jpa_hibernate.add("Как мапятся даты (до java 8 и после)?");
        jpa_hibernate.add("Как “смапить” коллекцию примитивов?");
        jpa_hibernate.add("Какие есть виды связей?");
        jpa_hibernate.add("Что такое владелец связи?");
        jpa_hibernate.add("Что такое каскады?");
        jpa_hibernate.add("Какие два типа fetch стратегии в JPA вы знаете?");
        jpa_hibernate.add("Какие четыре статуса жизненного цикла Entity объекта (Entity Instance’s Life Cycle) вы можете перечислить?");
        jpa_hibernate.add("Как влияет операция persist на Entity объекты каждого из четырех статусов?");
        jpa_hibernate.add("Как влияет операция remove на Entity объекты каждого из четырех статусов?");
        jpa_hibernate.add("Как влияет операция merge на Entity объекты каждого из четырех статусов?");
        jpa_hibernate.add("Как влияет операция refresh на Entity объекты каждого из четырех статусов?");
        jpa_hibernate.add("Как влияет операция detach на Entity объекты каждого из четырех статусов?");
        jpa_hibernate.add("Для чего нужна аннотация Basic?");
        jpa_hibernate.add("Для чего нужна аннотация Column?");
        jpa_hibernate.add("Для чего нужна аннотация Access?");
        jpa_hibernate.add("Для чего нужна аннотация Cacheable?");
        jpa_hibernate.add("Для чего нужны аннотации @Embedded и @Embeddable?");
        jpa_hibernate.add("Как смапить составной ключ?");
        jpa_hibernate.add("Для чего нужна аннотация ID? Какие @GeneratedValue вы знаете?");
        jpa_hibernate.add("Расскажите про аннотации @JoinColumn и @JoinTable? Где и для чего они используются?");
        jpa_hibernate.add("Для чего нужны аннотации @OrderBy и @OrderColumn, чем они отличаются?");
        jpa_hibernate.add("Для чего нужна аннотация Transient?");
        jpa_hibernate.add("Какие шесть видов блокировок (lock) описаны в спецификации JPA (или какие есть значения у enum LockModeType в JPA)?");
        jpa_hibernate.add("Какие два вида кэшей (cache) вы знаете в JPA и для чего они нужны?");
        jpa_hibernate.add("Как работать с кешем 2 уровня?");
        jpa_hibernate.add("Что такое JPQL/HQL и чем он отличается от SQL?");
        jpa_hibernate.add("Что такое Criteria API и для чего он используется?");
        jpa_hibernate.add("Расскажите про проблему N+1 Select и путях ее решения.");
        jpa_hibernate.add("Что такое EntityGraph? Как и для чего их использовать?");
        jpa_hibernate.add("");
    }
    static {
        spring.add("Что такое инверсия контроля (IoC) и внедрение зависимостей (DI)? Как эти принципы реализованы в Spring?");
        spring.add("Что такое IoC контейнер?");
        spring.add("Что такое Bean в спринге?");
        spring.add("Расскажите про аннотацию @Bean?");
        spring.add("Расскажите про аннотацию @Component?");
        spring.add("Чем отличаются аннотации @Bean и @Component?");
        spring.add("Расскажите про аннотации @Service и @Repository. Чем они отличаются?");
        spring.add("Расскажите про аннотацию @Autowired.");
        spring.add("Расскажите про аннотацию @Resource.");
        spring.add("Расскажите про аннотацию @Inject.");
        spring.add("Расскажите про аннотацию @Lookup.");
        spring.add("Можно ли вставить бин в статическое поле? Почему?");
        spring.add("Расскажите про аннотации @Primary и @Qualifier.");
        spring.add("Как заинжектить примитив?");
        spring.add("Как заинжектить коллекцию?");
        spring.add("Расскажите про аннотацию @Conditional.");
        spring.add("Расскажите про аннотацию @Profile.");
        spring.add("Расскажите про ApplicationContext и BeanFactory,  чем отличаются? В каких случаях что стоит использовать?");
        spring.add("Расскажите про жизненный цикл бина, аннотации @PostConstruct и @PreDestroy().");
        spring.add("Расскажите про скоупы бинов? Какой скоуп используется по умолчанию? Что изменилось в пятом спринге?");
        spring.add("Расскажите про аннотацию @ComponentScan.");
        spring.add("Как спринг работает с транзакциями? Расскажите про аннотацию @Transactional.");
        spring.add("Расскажите про аннотации @Controller и @RestController. Чем они отличаются? Как вернуть ответ со своим статусом (например 213)?");
        spring.add("Что такое ViewResolver?");
        spring.add("Чем отличаются Model, ModelMap и ModelAndView?");
        spring.add("Расскажите про паттерн MVC, как он реализован в Spring?");
        spring.add("Расскажите про паттерн Front Controller, как он реализован в Spring?");
        spring.add("Что такое АОП? Как реализовано в спринге?");
        spring.add("В чем разница между Filters, Listeners and Interceptors?");
        spring.add("Можно ли передать в запросе один и тот же параметр несколько раз? Как?");
        spring.add("Как работает Spring Security? Как сконфигурировать? Какие интерфейсы используются?");
        spring.add("Что такое SpringBoot? Какие у него преимущества? Как конфигурируется? Подробно.");
        spring.add("Расскажите про нововведения Spring 5.");
        spring.add("");
    }
    static {
        patterns.add("Что такое «шаблон проектирования»?");
        patterns.add("Назовите основные характеристики шаблонов.");
        patterns.add("Назовите три основные группы паттернов.");
        patterns.add("Расскажите про паттерн Одиночка (Singleton).");
        patterns.add("Расскажите про паттерн Строитель (Builder).");
        patterns.add("Расскажите про паттерн Фабричный метод (Factory Method).");
        patterns.add("Расскажите про паттерн Абстрактная фабрика (Abstract Factory).");
        patterns.add("Расскажите про паттерн Прототип (Prototype).");
        patterns.add("Расскажите про паттерн Адаптер (Adapter).");
        patterns.add("Расскажите про паттерн Декоратор (Decorator).");
        patterns.add("Расскажите про паттерн Заместитель (Proxy).");
        patterns.add("Расскажите про паттерн Итератор (Iterator).");
        patterns.add("Расскажите про паттерн Шаблонный метод (Template Method).");
        patterns.add("Расскажите про паттерн Цепочка обязанностей (Chain of Responsibility).");
        patterns.add("Какие паттерны используются в Spring Framework?");
        patterns.add("Какие паттерны используются в Hibernate?");
        patterns.add("");
    }
    static {
        algorithms.add("Что такое Big O? Как происходит оценка асимптотической сложности алгоритмов?");
        algorithms.add("Что такое рекурсия? Сравните преимущества и недостатки итеративных и рекурсивных алгоритмов. С примерами.");
        algorithms.add("Что такое жадные алгоритмы? Приведите пример.");
        algorithms.add("Расскажите про пузырьковую сортировку.");
        algorithms.add("Расскажите про быструю сортировку.");
        algorithms.add("Расскажите про сортировку слиянием.");
        algorithms.add("Расскажите про бинарное дерево.");
        algorithms.add("Расскажите про красно-черное дерево.");
        algorithms.add("Расскажите про линейный и бинарный поиск.");
        algorithms.add("Расскажите про очередь и стек.");
        algorithms.add("Сравните сложность вставки, удаления, поиска и доступа по индексу в ArrayList и LinkedList. ");
        algorithms.add("");
    }
}
